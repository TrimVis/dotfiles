# for snippet options (b/A/w/...) see :h UltiSnips-snippet-options

############################################################################################
#                     Math context to determine when to expand                             #
############################################################################################

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x, y] = vim.eval(f"vimtex#env#is_inside('{name}')")
	return x != 0 and y != 0
endglobal



############################################################################################
#                                Sections, Subsections, Chapters, etc.                     #
############################################################################################

snippet sec "section" b
\section{${1:${VISUAL}}}
\label{sec:$2}
$0
endsnippet

snippet subsec "subsection" b
\subsection{${1:${VISUAL}}}
\label{ssec:$2}
$0
endsnippet

snippet subsubsec "subsubsection" b
\subsubsection{${1:${VISUAL}}}
\label{sssec:$2}
$0
endsnippet

snippet chap "subsection" b
\chapter{${1:${VISUAL}}}
\label{chap:$2}
$0
endsnippet


############################################################################################
#                                     Environments                                         #
############################################################################################

# begin and end environment automatically
snippet beg "begin{} / end{}" bA
\begin{$1}$2
${3:${VISUAL}}
\end{$1}
$0
endsnippet

# inline math (automatically appends space if needed)
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# displaymath
snippet dm "Math" wA
\[
${1:${VISUAL}}
\ . \] $0
endsnippet

snippet item "itemize" b
\begin{itemize}[$1]
\item $0
\end{itemize}
endsnippet

snippet enum "enumerate" b
\begin{enumerate}[label=${1:\arabic*)}$2]
\item $0
\end{enumerate}
endsnippet

snippet desc "description" b
\begin{description}
\item[$1] $0
\end{description}
endsnippet

snippet eq "Equation" b
\begin{equation}
${2:${VISUAL}}
\label{eq:$1}
\ . \end{equation}
$0
endsnippet

snippet eqs "Equation*" b
\begin{equation*}
${1:${VISUAL}}
\ . \end{equation*}
endsnippet

snippet ali "Align" b
\begin{gather} \begin{aligned}
${2:${VISUAL}}
\label{eq:$1}
\ . \end{aligned} \end{gather}
$0
endsnippet

snippet alis "Align*" b
\begin{align*}
${1:${VISUAL}}
\ . \end{align*}
endsnippet

snippet Thm "Theorem" b
\begin{theorem}
${1:${VISUAL}}
\end{theorem}
$0
endsnippet

snippet Def "Definition" b
\begin{definition}
${1:${VISUAL}}
\end{definition}
$0
endsnippet

snippet Proof "Proof" b
\begin{proof}
${1:${VISUAL}}
\end{proof}
$0
endsnippet

snippet Rem "Remark" b
\begin{remark}
${1:${VISUAL}}
\end{remark}
$0
endsnippet

snippet tab "Table" b
\begin{table}[ht] \centering
\begin{tabular}{$1}
${4:${VISUAL}}
\end{tabular}
\caption{$2}
\label{tab:$3}
\end{table}
endsnippet

snippet plot "Plot" b
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet


snippet fig "figure" b
\begin{figure}[ht]
	\centering
	$0
	\caption{$1}
	\label{fig:$2}
\end{figure}
endsnippet

snippet subfig "subfigure" b
\begin{subfigure}{$1\textwidth}
	\centering
	$0
	\caption{$2}
	\label{fig:$3}
\end{subfigure}%
endsnippet



############################################################################################
#                                     Basic Snippets                                       #
############################################################################################


snippet pac "Package" b
\usepackage[$1]{$2}$0
endsnippet


snippet %-- "visual margin" bA
%-------------------------------------------------------------------------------------------

$0
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet




############################################################################################
#                                  Various Operators                                       #
############################################################################################

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "math()"
snippet sum "sum" w
\sum_{$1}^{$2} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet int "int" w
\int_{$1}^{$2} ${3:${VISUAL}} $0
endsnippet

priority 100
context "math()"
snippet max "max" w
\max_{$1} ${2:${VISUAL}} $0
endsnippet

priority 100
context "math()"
snippet min "min" w
\min_{$1} ${2:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet argmax "argmax" wA
\argmax_{$1} ${2:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet argmin "argmin" wA
\argmin_{$1} ${2:${VISUAL}} $0
endsnippet

priority 100
context "math()"
snippet underb "underbrace" w
\underbrace{${1:${VISUAL}}}_{$2} $0
endsnippet

context "math()"
snippet overb "overbrace" w
\overbrace{${1:${VISUAL}}_{$2} $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet prod "product" w
\prod_{$1}^{$2} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial $1}{\partial $2} $0
endsnippet

priority 500
context "math()"
snippet diff "d/dx" w
\frac{\d $1}{\d $2} $0
endsnippet

context "math()"
snippet sqr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "neq" iA
\neq
endsnippet

priority 100
context "math()"
snippet <= "leq" iA
\leq
endsnippet

context "math()"
snippet >= "geq" iA
\geq
endsnippet

context "math()"
snippet EE "geq" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet || "bar" iA
\mid
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet ... "dots" iA
\dots
endsnippet

context "math()"
snippet :: "colon" iA
\colon
endsnippet

context "math()"
snippet ~~ "~" iA
\sim
endsnippet

context "math()"
snippet binom "binomial coefficient" iA
\binom{$1}{$2}
endsnippet



############################################################################################
#                                      Set Algebra                                         #
############################################################################################

context "math()"
snippet UU "cup" iA
\cup
endsnippet

context "math()"
snippet NN "cap" iA
\cap
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{$1}
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{$1}
endsnippet

context "math()"
snippet \\\ "setminus (backslash)" iA
\setminus
endsnippet

context "math()"
snippet OO "emptyset" iA
\varnothing
endsnippet


############################################################################################
#                                         Arrows                                           #
############################################################################################

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 100
context "math()"
snippet => "implies" iA
\Rightarrow
endsnippet

priority 100
context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

priority 200
context "math()"
snippet iff "Leftrightarrow" i
\Leftrightarrow
endsnippet

priority 200
context "math()"
snippet --> "longrightarrow" iA
\longrightarrow
endsnippet

priority 200
context "math()"
snippet ==> "Longrightarrow" iA
\Longrightarrow
endsnippet

context "math()"
snippet <- "leftarrow" iA
\leftarrow
endsnippet

context "math()"
snippet gets "leftarrow" iA
\leftarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet



############################################################################################
#                                      Other Text Styles                                   #
############################################################################################

context "math()"
snippet cal "mathcal" iA
\mathcal{${1:${VISUAL}}}$0
endsnippet

priority 100
snippet bf "textbf" i
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet emph "emph" w
\emph{${1:${VISUAL}}}$0
endsnippet

priority 100
snippet it "textit" i
\textit{${1:${VISUAL}}}$0
endsnippet

priority 200
context "math()"
snippet bf "mathbf" iA
\mathbf{${1:${VISUAL}}}$0
endsnippet

# snippet '(?<!(ga)|((\[|[0-9])[0-9]))mm' "index m" irA
priority 10
context "math()"
snippet '(?<!\\)b([a-z\\A-Z]+)' "bold variable" rw
\\mathbf{`!p snip.rv = match.group(1)`}$0
endsnippet

priority 100
snippet code "texttt" i
\texttt{${1:${VISUAL}}}$0
endsnippet



############################################################################################
#                                      Fraction Snippets                                   #
############################################################################################

# simple fraction by writing //, then numerator and denominator
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# fraction by writing numerator, /, and denominator
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# same as above but with support for parenthesized numerators
priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# use visual selection as numerator, then type <tab>, /, <tab>, and denominator
context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet




############################################################################################
#                                  Various Subscripts                                      #
############################################################################################

# auto subscripts words followed by a single digit
priority 100
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# auto subscripts words followed by _ and two digits
context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# make trailing i, j, k, n, m subscript if typed twice
# don't expand \xi too early
context "math()"
snippet '(?<!(\\x))ii' "index i" wrA
_i
endsnippet
context "math()"
snippet '([A-Za-z]*)jj' "index j" wrA
`!p snip.rv = match.group(1)`_j
endsnippet
context "math()"
snippet '([A-Za-z]*)kk' "index k" wrA
`!p snip.rv = match.group(1)`_k
endsnippet
context "math()"
snippet '([A-Za-z]*)nn' "index n" wrA
`!p snip.rv = match.group(1)`_n
endsnippet
# don't expand gamma or something like \[1mm]
context "math()"
snippet '(?<!(ga)|(Ga)|((\[|[0-9])[0-9]))mm' "index m" irA
_m
endsnippet

# similar to all the above but with additional +/- 1 in subscript
priority 200
context "math()"
snippet '([A-Za-z]*)ip1' "index i+1" wrA
`!p snip.rv = match.group(1)`_{i+1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)im1' "index i-1" wrA
`!p snip.rv = match.group(1)`_{i-1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)jp1' "index j+1" wrA
`!p snip.rv = match.group(1)`_{j+1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)jm1' "index j-1" wrA
`!p snip.rv = match.group(1)`_{j-1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)kp1' "index k+1" wrA
`!p snip.rv = match.group(1)`_{k+1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)km1' "index k-1" wrA
`!p snip.rv = match.group(1)`_{k-1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)np1' "index n+1" wrA
`!p snip.rv = match.group(1)`_{n+1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)nm1' "index n-1" wrA
`!p snip.rv = match.group(1)`_{n-1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)mp1' "index m+1" wrA
`!p snip.rv = match.group(1)`_{m+1}
endsnippet
priority 200
context "math()"
snippet '([A-Za-z]*)mn1' "index m-1" wrA
`!p snip.rv = match.group(1)`_{m-1}
endsnippet


# use sts for a text subscript (the first part makes sure that the predecing text
# is not i to prevent expanding the word exists
context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet





############################################################################################
#                                     Postfix Snippets                                     #
############################################################################################

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

# originally without *, i.e. only one letter
priority 100
context "math()"
snippet "([a-z\\A-Z]+)bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

# originally without *, i.e. only one letter
priority 100
context "math()"
snippet "([a-z\\{}A-Z]*([a-z{}A-Z]))hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet .T "Transpose" iA
^{\top}
endsnippet

context "math()"
snippet "([a-z\\{}AZ]+)tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet




############################################################################################
#                                   Common Functions                                       #
############################################################################################

context "math()"
snippet et "e to the" i
\e^{$1} $0
endsnippet


############################################################################################
#                                  Parentheses, etc.                                       #
############################################################################################

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left< ${1:${VISUAL}} \right>$0
endsnippet

snippet lr< "leftangle rightangle" iA
\left< ${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet



############################################################################################
#                                  Matrices                                                #
############################################################################################

context "math()"
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet


context "math()"
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet


context "math()"
snippet rij "matrix or sequence elemtns" i
($1_${2:n})_{${3:$2} \\in ${4:\\N}}$0
endsnippet


############################################################################################
#                                  Sympy Math                                              #
############################################################################################

context "math()"
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
